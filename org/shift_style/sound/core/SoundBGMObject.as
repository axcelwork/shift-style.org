package org.shift_style.sound.core {	import flash.display.Sprite;
	import flash.events.TimerEvent;
	import flash.utils.Timer;
	import flash.events.Event;	import flash.media.Sound;	import flash.media.SoundTransform;	public class SoundBGMObject extends ExSoundObject {		private var _fader:Sprite = new Sprite();		private var _decay:Number = 0;		private var _targetVolume:Number = 0;		private var _trans:SoundTransform;				public function SoundBGMObject(sound:Sound, track:String, loop:Boolean = true, isMute:Boolean = false) {			super(sound, track, loop, isMute);		}		public override function play(volume:Number = 1, time:Number = 0):void {			if (this._isPlay) return;						this._isPlay = true;						if (this._isLoop) {				this._channel = this._sound.play(0, int.MAX_VALUE);			} else {				this._channel = this._sound.play(0);				this._channel.addEventListener(Event.SOUND_COMPLETE, playComplete);			}						this._trans = this._channel.soundTransform;			/*			this._trans.volume = volume;			this._channel.soundTransform = this._trans;						this._volume = this.volume;			*/			this._volume = volume;			this._decay = volume / (time * 100);						this._fader.addEventListener(Event.ENTER_FRAME, fadeIn);						if(this._isMute) {				this._trans.volume = 0;				this._channel.soundTransform = this._trans;				return;			}		}		private function playComplete(e:Event):void {			this._isPlay = false;		}				/**		 * 停止します		 */		public override function stop(time:Number = 0):void {			// 再生されていなかったら無効			if (!this._isPlay) return;						this._isPlay = false;			//this._channel.stop();			this._decay = this._volume / (time * 100);			this._fader.addEventListener(Event.ENTER_FRAME, fadeOut);		}				private function fadeIn(e:Event):void {			if(this._volume > this._targetVolume){				this._trans.volume = this._targetVolume + this._decay;				this._channel.soundTransform = this._trans;				this._targetVolume = this._trans.volume;				//this._volume = this._targetVolume;			}			else{				this._fader.removeEventListener(Event.ENTER_FRAME, fadeIn);			}		}				private function fadeOut(e:Event):void {			if(this._volume > 0){				this._trans.volume = this._volume - this._decay;				this._channel.soundTransform = this._trans;				this._volume = this._trans.volume;			}			else{				this._targetVolume = this._volume;				this._fader.removeEventListener(Event.ENTER_FRAME, fadeOut);			}		}
	}}